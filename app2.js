let gameSeq = [];  // Stores the sequence generated by the game
let userSeq = [];  // Stores the sequence entered by the user
let btns = ["yellow", "red", "blue", "green"]; // Button colors

let started = false; // Tracks whether the game has started
let level = 0; // Tracks the current game level
let highScore = localStorage.getItem("highScore") || 0; // Retrieve high score from localStorage

let h2 = document.querySelector("h2"); // Selects the h2 heading
let scoreDisplay = document.createElement("h3"); // Create an element to display the high score
scoreDisplay.innerText = `Highest Score: ${highScore}`;
document.body.appendChild(scoreDisplay); // Add it to the page

// Listen for a keypress event to start the game
document.addEventListener("keypress", function () {
    if (!started) { // Ensure game starts only once
        console.log("Game started");
        started = true;
        level = 0;
        gameSeq = [];
        userSeq = [];
        levelUp(); // Start the game
    }
});

// Function to flash a button
function btnFlash(btn) {
    btn.classList.add("flash"); // Add the "flash" class
    setTimeout(function () {
        btn.classList.remove("flash"); // Remove the class after 100ms
    }, 100);
}

// Function to move to the next level
function levelUp() {
    userSeq = []; // Reset user sequence for the new level
    level++; // Increase the level
    h2.innerText = `Level ${level}`; // Update level display

    let randIdx = Math.floor(Math.random() * 4); 
    let randColor = btns[randIdx]; // Select a random color
    let randbtn = document.querySelector(`.${randColor}`); // Select the button

    gameSeq.push(randColor); // Store the game sequence
    console.log("Game Sequence:", gameSeq);

    setTimeout(() => {
        btnFlash(randbtn); // Flash the button
    }, 500);
}

// Function to check the user's input
function checkAns(idx) {
    if (userSeq[idx] !== gameSeq[idx]) {
        if (level > highScore) { // Check if current score is higher than the stored high score
            highScore = level - 1; // Update high score (previous level before failing)
            localStorage.setItem("highScore", highScore); // Save it to localStorage
            scoreDisplay.innerText = `Highest Score: ${highScore}`; // Update the display
        }

        h2.innerHTML = `Game Over! Your score was <b>${level - 1}</b> <br>Press Any Key to Restart`;
        document.querySelector("body").style.backgroundColor = "red"; // Flash red when wrong

        setTimeout(function() {
            document.querySelector("body").style.backgroundColor = "white";
        }, 150);

        console.log("Game Over! Press Any Key to start");
        reset(); // Reset the game
    } else if (userSeq.length === gameSeq.length) {
       levelUp();
    }
}

// Function to handle button clicks
function btnPress() {
    let btn = this;
    btnFlash(btn);

    let userColor = btn.getAttribute("id"); // Get the clicked button color
    userSeq.push(userColor);
    console.log("User Sequence:", userSeq);

    checkAns(userSeq.length - 1); // Check after each user click
}

// Add event listeners to all buttons
let allBtns = document.querySelectorAll(".btn");
for (let btn of allBtns) {
    btn.addEventListener("click", btnPress);
}

// Function to reset the game
function reset() {
    started = false;
    gameSeq = [];
    userSeq = [];
    level = 0;
}
